Document Title,Authors,Author Affiliations,Publication Title,Date Added To Xplore,Publication Year,Volume,Issue,Start Page,End Page,Abstract,ISSN,ISBNs,DOI,Funding Information,PDF Link,Author Keywords,IEEE Terms,INSPEC Controlled Terms,INSPEC Non-Controlled Terms,Mesh_Terms,Article Citation Count,Reference Count,License,Online Date,Issue Date,Meeting Date,Publisher,Document Identifier
Keynotes,,,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,36,38,Provides an abstract for each of the keynote presentations and may include a brief professional biography of each presenter. The complete presentations were not made available for publication as part of the conference proceedings.,,,10.1109/ASE.2019.00010,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952191,,,,,,,,,,,,IEEE,IEEE Conferences
Big problems in industry (panel),J. Penix,"Google, USA",2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2013,,,3,3,"Software Engineering in practice deals with scale in a variety of dimensions. We build large scale systems operating on vast amount of data. We have millions of customers with billions of queries and transactions. We have distributed teams making thousands of changes, running millions of tests and releasing multiple times per day. These dimensions of scale interact to provide challenges for software development tools and processes. The panelists will describe the challenging aspects of scale in their specific problem domains and discuss which software engineering methods work and which leave room for improvement.",,,10.1109/ASE.2013.6693060,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6693060,,,,,,1,,,,,,IEEE,IEEE Conferences
Toward Practical Automatic Program Repair,A. Ghanbari,University of Texas at Dallas,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,1262,1264,"Automated program repair (APR) reduces the burden of debugging by directly suggesting likely fixes for the bugs. We believe scalability, applicability, and accurate patch validation are among the main challenges for building practical APR techniques that the researchers in this area are dealing with. In this paper, we describe the steps that we are taking toward addressing these challenges.",,,10.1109/ASE.2019.00156,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952355,Program Repair;JVM Bytecode;Mutation Testing,,,,,,54,,,,,IEEE,IEEE Conferences
TsmartGP: A Tool for Finding Memory Defects with Pointer Analysis,Y. Wang; G. Chen; M. Zhou; M. Gu; J. Sun,Tsinghua University; Tsinghua University; Tsinghua University; Tsinghua University; Tsinghua University,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,1170,1173,"Precise pointer analysis is desired since it is a core technique to find memory defects. There are several dimensions of pointer analysis precision, flow sensitivity, context sensitivity, field sensitivity and path sensitivity. For static analysis tools utilizing pointer analysis, considering all dimensions is difficult because the trade-off between precision and efficiency should be balanced. This paper presents TsmartGP, a static analysis tool for finding memory defects in C programs with a precise and efficient pointer analysis. The pointer analysis algorithm is flow, context, field, and quasi path sensitive. Control flow automatons are the key structures for our analysis to be flow sensitive. Function summaries are applied to get context information and elements of aggregate structures are handled to improve precision. Path conditions are used to filter unreachable paths. For efficiency, a multi-entry mechanism is proposed. Utilizing the pointer analysis algorithm, we implement a checker in TsmartGP to find uninitialized pointer errors in 13 real-world applications. Cppcheck and Clang Static Analyzer are chosen for comparison. The experimental results show that TsmartGP can find more errors while its accuracy is also higher than Cppcheck and Clang Static Analyzer.",,,10.1109/ASE.2019.00129,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952426,pointer analysis;uninitialized pointer;sensitivity;multi-entry,,,,,,12,,,,,IEEE,IEEE Conferences
Retrieve and Refine: Exemplar-Based Neural Comment Generation,B. Wei,Peking University,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,1250,1252,"Code comment generation is a crucial task in the field of automatic software development. Most previous neural comment generation systems used an encoder-decoder neural network and encoded only information from source code as input. Software reuse is common in software development. However, this feature has not been introduced to existing systems. Inspired by the traditional IR-based approaches, we propose to use the existing comments of similar source code as exemplars to guide the comment generation process. Based on an open source search engine, we first retrieve a similar code and treat its comment as an exemplar. Then we applied a seq2seq neural network to conduct an exemplar-based comment generation. We evaluate our approach on a large-scale Java corpus, and experimental results demonstrate that our model significantly outperforms the state-of-the-art methods.",,,10.1109/ASE.2019.00152,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952536,comment generation;program comprehension;deep learning,,,,,,21,,,,,IEEE,IEEE Conferences
Humanoid: A Deep Learning-Based Approach to Automated Black-box Android App Testing,Y. Li; Z. Yang; Y. Guo; X. Chen,Peking University; Peking University; Peking University; Peking University,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,1070,1073,"Automated input generators must constantly choose which UI element to interact with and how to interact with it, in order to achieve high coverage with a limited time budget. Currently, most black-box input generators adopt pseudo-random or brute-force searching strategies, which may take very long to find the correct combination of inputs that can drive the app into new and important states. We propose Humanoid, an automated black-box Android app testing tool based on deep learning. The key technique behind Humanoid is a deep neural network model that can learn how human users choose actions based on an app's GUI from human interaction traces. The learned model can then be used to guide test input generation to achieve higher coverage. Experiments on both open-source apps and market apps demonstrate that Humanoid is able to reach higher coverage, and faster as well, than the state-of-the-art test input generators. Humanoid is open-sourced at https://github.com/yzygitzh/Humanoid and a demo video can be found at https://youtu.be/PDRxDrkyORs.",,,10.1109/ASE.2019.00104,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952324,software testing;automated test input generation;graphical user interface;deep learning;mobile application;Android,,,,,,14,,,,,IEEE,IEEE Conferences
A Machine Learning Based Approach to Identify SQL Injection Vulnerabilities,K. Zhang,Wayne State University,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,1286,1288,"This paper presents a machine learning classifier designed to identify SQL injection vulnerabilities in PHP code. Both classical and deep learning based machine learning algorithms were used to train and evaluate classifier models using input validation and sanitization features extracted from source code files. On ten-fold cross validations a model trained using Convolutional Neural Network(CNN) achieved the highest precision (95.4%), while a model based on Multilayer Perceptron(MLP) achieved the highest recall (63.7%) and the highest f-measure (0.746).",,,10.1109/ASE.2019.00164,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952467,Deep learning;prediction model;SQL injection;vulnerability,,,,,,18,,,,,IEEE,IEEE Conferences
Test Automation and Its Limitations: A Case Study,A. Sung; S. Kim; Y. Kim; Y. Jang; J. Kim,Samsung Electronics; Samsung Electronics; Samsung Electronics; Samsung Electronics; Samsung Electronics,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,1208,1209,"Modern embedded systems are increasingly complex and contain multiple software layers from BSP (Board Support Packages) to OS to middleware to AI (Artificial Intelligence) algorithms like perception and voice recognition. Integrations of inter-layer and intra-layer in embedded systems provide dedicated services such as taking a picture or movie-streaming. Accordingly, it gets more complicated to find out the root cause of a system failure. This industrial proposal describes a difficulty of testing embedded systems, and presents a case study in terms of integration testing.",,,10.1109/ASE.2019.00139,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952292,"embedded system, software layer, integration test, test automation",,,,,,19,,,,,IEEE,IEEE Conferences
PHANTA: Diversified Test Code Quality Measurement for Modern Software Development,S. Tokumoto; K. Takayama,Fujitsu Laboratories Ltd.; Fujitsu Laboratories Ltd.,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),,2019,,,1206,1207,"Test code is becoming more essential to the modern software development process. However, practitioners often pay inadequate attention to key aspects of test code quality, such as bug detectability, maintainability and speed. Existing tools also typically report a single test code quality measure, such as code coverage, rather than a diversified set of metrics. To measure and visualize quality of test code in a comprehensive fashion, we developed an integrated test code analysis tool called Phanta. In this show case, we posit that the enhancement of test code quality is key to modernizing software development, and show how Phanta's techniques measure the quality using mutation analysis, test code clone detection, and so on. Further, we present an industrial case study where Phanta was applied to analyze test code in a real Fujitsu project, and share lessons learned from the case study.",,,10.1109/ASE.2019.00138,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952538,Software Testing;Test Code;Mutation Testing,,,,,,6,,,,,IEEE,IEEE Conferences
